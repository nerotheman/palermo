// import type { Metadata } from 'next';
// import { Inter } from 'next/font/google';
// import '../globals.css';
// import { notFound } from 'next/navigation';
// import { locales } from '../../config';
// import { ReactNode } from 'react';

// const inter = Inter({ subsets: ['latin'] });

// type Props = {
//   children: ReactNode;
//   params: { locale: string };
// };
// const locale = locales.map(locale => ({ locale }));
// console.log(locale);

// export function generateStaticParams() {
//   return locales.map(locale => ({ locale }));
// }

// export const metadata: Metadata = {
//   title: 'Create Next App',
//   description: 'Generated by create next app',
// };

// export default function LocaleLayout({ children, params: { locale } }: Props) {
//   if (!locales.includes(locale as any)) notFound();
//   return (
//     <html lang={locale}>
//       <body className={inter.className}>{children}</body>
//     </html>
//   );
// }

import clsx from 'clsx';
import { Inter } from 'next/font/google';
import { notFound } from 'next/navigation';
import { getTranslations, unstable_setRequestLocale } from 'next-intl/server';
import { ReactNode } from 'react';
import { locales } from '@/config';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import ThemeProvider from '@/providers/ThemeProvider';
import { teko, lobster, lato } from '../fonts';

const inter = Inter({ subsets: ['latin'] });

type Props = {
  children: ReactNode;
  params: { locale: string };
};

export function generateStaticParams() {
  return locales.map(locale => ({ locale }));
}

export async function generateMetadata({
  params: { locale },
}: Omit<Props, 'children'>) {
  const t = await getTranslations({ locale, namespace: 'Metadata' });

  return {
    title: t('title'),
  };
}

export default async function LocaleLayout({
  children,
  params: { locale },
}: Props) {
  // Validate that the incoming `locale` parameter is valid
  if (!locales.includes(locale as any)) notFound();

  // Enable static rendering
  unstable_setRequestLocale(locale);

  return (
    <html
      lang={locale}
      className={`${lato.variable} ${teko.variable} ${lobster.variable}`}
      suppressHydrationWarning
    >
      <body>
        <ThemeProvider>
          <Navbar />
          <main>{children}</main>
          <Footer />
        </ThemeProvider>
      </body>
    </html>
  );
}
